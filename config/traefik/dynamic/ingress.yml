# yaml-language-server: $schema=https://json.schemastore.org/traefik-v2-file-provider.json
tls:
  options:
    default:
      minVersion: "VersionTLS12"
      # {{ if or ( env "TRAEFIK_TLS_RESOLVER" ) ( env "TRAEFIK_TLS_CERT" ) }}
      sniStrict: true
      # {{ end }}
      # {{ if env "TRAEFIK_MTLS_CERTS" }}
      clientAuth:
        clientAuthType: "RequireAndVerifyClientCert"
        caFiles:
          # {{ range $i, $v := env "TRAEFIK_MTLS_CERTS" | splitList "\n" }}
          - '{{ $v }}'
          # {{ end }}
      # {{ end }}
  # {{ if env "TRAEFIK_TLS_CERT" }}
  certificates:
    - keyFile: '{{ env "TRAEFIK_TLS_KEY" }}'
      certFile: '{{ env "TRAEFIK_TLS_CERT" }}'
  # {{ end }}
http:
  routers:
    https-redirect:
      rule: 'PathPrefix(`/`)'
      entryPoints: ["http"]
      middlewares: ["https-redirect"]
      service: "noop@internal"
    grist:
      rule: 'Host(`{{ env "GRIST_DOMAIN" }}`)'
      entryPoints: ["https"]
      middlewares: ["compress", "security-headers", "grist-security-headers"]
      service: "grist"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    dex:
      rule: 'Host(`{{ env "DEX_DOMAIN" }}`)'
      entryPoints: ["https"]
      middlewares: ["compress", "security-headers", "dex-security-headers"]
      service: "dex"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    minio-s3:
      rule: 'Host(`{{ env "MINIO_DOMAIN" }}`)'
      entryPoints: ["https"]
      service: "minio-s3"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    minio-console:
      rule: 'Host(`{{ env "MINIO_DOMAIN" }}`) && PathPrefix(`/console/`)'
      entryPoints: ["https"]
      middlewares: ["compress", "strip-prefix", "basic-auth", "security-headers", "minio-console-security-headers"]
      service: "minio-console"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    grafana:
      rule: 'Host(`{{ env "GRAFANA_DOMAIN" }}`)'
      entryPoints: ["https"]
      middlewares: ["compress", "security-headers", "grafana-security-headers"]
      service: "grafana"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    prometheus:
      rule: 'Host(`{{ env "PROMETHEUS_DOMAIN" }}`)'
      entryPoints: ["https"]
      middlewares: ["compress", "basic-auth", "security-headers", "prometheus-security-headers"]
      service: "prometheus"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
    traefik:
      rule: 'Host(`{{ env "TRAEFIK_DOMAIN" }}`)'
      entryPoints: ["https"]
      middlewares: ["compress", "basic-auth", "security-headers", "traefik-security-headers"]
      service: "api@internal"
      tls:
        certResolver: '{{ env "TRAEFIK_TLS_RESOLVER" }}'
  middlewares:
    https-redirect:
      redirectScheme:
        scheme: "https"
        permanent: true
    compress:
      compress:
        minResponseBodyBytes: 1024
        includedContentTypes:
          - "application/javascript"
          - "application/json"
          - "application/wasm"
          - "application/xml"
          - "image/svg+xml"
          - "text/css"
          - "text/html"
          - "text/javascript"
          - "text/plain"
    strip-prefix:
      stripPrefixRegex:
        regex: ['\/[^\/]+']
    basic-auth:
      basicAuth:
        users: ['{{ env "TRAEFIK_BASIC_AUTH" }}']
        removeHeader: true
    security-headers:
      headers:
        stsSeconds: 31536000
        stsIncludeSubdomains: true
        stsPreload: true
        referrerPolicy: "strict-origin"
        contentTypeNosniff: true
        customResponseHeaders:
          Server: ""
          X-Powered-By: ""
    grist-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline' https://unpkg.com;
          style-src 'self' 'unsafe-inline' https://unpkg.com;
          img-src 'self' blob: data:;
          connect-src 'self' https://unpkg.com https://raw.githubusercontent.com;
          frame-src 'self' https://gristlabs.github.io;
    dex-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline';
          style-src 'self' 'unsafe-inline';
          img-src 'self' blob: data:;
    minio-console-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline' https://unpkg.com;
          style-src 'self' 'unsafe-inline' https://unpkg.com;
          img-src 'self' blob: data:;
          connect-src 'self' https://unpkg.com;
    grafana-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline' 'unsafe-eval';
          style-src 'self' 'unsafe-inline';
          img-src 'self' blob: data: https://grafana.com;
    prometheus-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline';
          style-src 'self' 'unsafe-inline';
          img-src 'self' blob: data:;
    traefik-security-headers:
      headers:
        contentSecurityPolicy: >-
          default-src 'self';
          script-src 'self' 'unsafe-inline';
          style-src 'self' 'unsafe-inline';
          img-src 'self' blob: data:;
  services:
    grist:
      loadBalancer:
        servers:
          - url: "http://grist:8484"
    dex:
      loadBalancer:
        servers:
          - url: "http://dex:5556"
    minio-s3:
      loadBalancer:
        servers:
          - url: "http://minio:9000"
    minio-console:
      loadBalancer:
        servers:
          - url: "http://minio:9001"
    grafana:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"
    prometheus:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"
tcp:
  routers:
    postgres:
      rule: 'HostSNI(`*`)'
      entryPoints: ["postgres"]
      service: "postgres"
  services:
    postgres:
      loadBalancer:
        servers:
          - address: "postgres:5432"
