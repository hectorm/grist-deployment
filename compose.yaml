# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "docs"

# https://hub.docker.com/_/traefik
x-traefik-image: &traefik-image "docker.io/traefik:3.1"
# https://hub.docker.com/r/hectorm/proxy
x-proxy-image: &proxy-image "docker.io/hectorm/proxy:v2"
# https://hub.docker.com/r/gristlabs/grist
x-grist-image: &grist-image "docker.io/gristlabs/grist:1.1.14"
# https://github.com/goauthentik/authentik/pkgs/container/server
x-authentik-server-image: &authentik-server-image "ghcr.io/goauthentik/server:2024.4"
# https://github.com/goauthentik/authentik/pkgs/container/proxy
x-authentik-proxy-image: &authentik-proxy-image "ghcr.io/goauthentik/proxy:2024.4"
# https://github.com/goauthentik/authentik/pkgs/container/ldap
x-authentik-ldap-image: &authentik-ldap-image "ghcr.io/goauthentik/ldap:2024.4"
# https://hub.docker.com/r/minio/minio
x-minio-image: &minio-image "docker.io/minio/minio:RELEASE.2024-08-03T04-33-23Z"
# https://hub.docker.com/r/minio/mc
x-minio-mc-image: &minio-mc-image "docker.io/minio/mc:RELEASE.2024-07-31T15-58-33Z"
# https://hub.docker.com/r/grafana/grafana
x-grafana-image: &grafana-image "docker.io/grafana/grafana:11.0.0"
# https://hub.docker.com/r/prom/prometheus
x-prometheus-image: &prometheus-image "docker.io/prom/prometheus:v2.52.0"
# https://hub.docker.com/_/postgres
x-postgres-image: &postgres-image "docker.io/postgres:16-bookworm"
# https://hub.docker.com/_/redis
x-redis-image: &redis-image "docker.io/redis:7-bookworm"

services:

  traefik:
    image: *traefik-image
    restart: "always"
    container_name: "docs-traefik"
    hostname: "traefik"
    networks:
      public:
      private:
        aliases:
          - "${GRIST_DOMAIN:?}"
          - "${AUTHENTIK_DOMAIN:?}"
          - "${MINIO_DOMAIN:?}"
          - "${GRAFANA_DOMAIN:?}"
          - "${PROMETHEUS_DOMAIN:?}"
          - "${TRAEFIK_DOMAIN:?}"
    ports:
      - "80:80/tcp" # HTTP.
      - "443:443/tcp" # HTTPS.
      - "443:443/udp" # HTTPS (QUIC).
      - "636:636/tcp" # LDAPS.
      - "127.0.0.1:5432:5432/tcp" # PostgreSQL.
    volumes:
      - { type: "bind", source: "./config/traefik/traefik.yml", target: "/etc/traefik/traefik.yml", read_only: true }
      - { type: "bind", source: "./config/traefik/dynamic/", target: "/etc/traefik/dynamic/", read_only: true }
      - { type: "bind", source: "./config/traefik/certs/server/", target: "/etc/traefik/certs/", read_only: true }
      - { type: "volume", source: "traefik-acme", target: "/etc/traefik/acme/" }
    environment:
      TRAEFIK_TLS_RESOLVER: "${TRAEFIK_TLS_RESOLVER:-}"
      TRAEFIK_TLS_KEY: "${TRAEFIK_TLS_KEY:-}"
      TRAEFIK_TLS_CERT: "${TRAEFIK_TLS_CERT:-}"
      TRAEFIK_MTLS_CERTS: "${TRAEFIK_MTLS_CERTS:-}"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      AUTHENTIK_DOMAIN: "${AUTHENTIK_DOMAIN:?}"
      MINIO_DOMAIN: "${MINIO_DOMAIN:?}"
      GRAFANA_DOMAIN: "${GRAFANA_DOMAIN:?}"
      PROMETHEUS_DOMAIN: "${PROMETHEUS_DOMAIN:?}"
      TRAEFIK_DOMAIN: "${TRAEFIK_DOMAIN:?}"
      CF_DNS_API_TOKEN: "${CF_DNS_API_TOKEN:-}"
      CF_ZONE_API_TOKEN: "${CF_ZONE_API_TOKEN:-}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

  proxy:
    image: *proxy-image
    restart: "always"
    container_name: "docs-proxy"
    hostname: "proxy"
    networks:
      public:
      private:
        aliases:
          - "api.getgrist.com"
          - "github.com"
          - "raw.githubusercontent.com"
          - "objects.githubusercontent.com"
          - "grafana.com"
    environment:
      PROXY_UPSTREAMS: |
        api.getgrist.com:443
        github.com:443
        raw.githubusercontent.com:443
        objects.githubusercontent.com:443
        grafana.com:443

  grist:
    image: *grist-image
    restart: "always"
    container_name: "docs-grist"
    hostname: "grist"
    networks:
      - "private"
    volumes:
      - { type: "volume", source: "grist-data", target: "/persist/" }
    environment:
      APP_HOME_URL: "https://${GRIST_DOMAIN:?}"
      APP_DOC_URL: "https://${GRIST_DOMAIN:?}"
      APP_STATIC_URL: "https://${GRIST_DOMAIN:?}"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      GRIST_SINGLE_ORG: "${GRIST_SINGLE_ORG:-}"
      GRIST_ORG_IN_PATH: "${GRIST_ORG_IN_PATH:-true}"
      GRIST_DEFAULT_EMAIL: "${GRIST_DEFAULT_EMAIL:?}"
      GRIST_SUPPORT_EMAIL: "${GRIST_SUPPORT_EMAIL:-support@${GRIST_DOMAIN:?}}"
      GRIST_SESSION_COOKIE: "${GRIST_SESSION_COOKIE:-grist_session}"
      GRIST_SESSION_SECRET: "${GRIST_SESSION_SECRET:?}"
      GRIST_BOOT_KEY: "${GRIST_BOOT_KEY:?}"
      COOKIE_MAX_AGE: "${COOKIE_MAX_AGE:-none}"
      GRIST_FORCE_LOGIN: "${GRIST_FORCE_LOGIN:-true}"
      GRIST_SUPPORT_ANON: "${GRIST_SUPPORT_ANON:-false}"
      GRIST_ANON_PLAYGROUND: "${GRIST_ANON_PLAYGROUND:-false}"
      GRIST_DEFAULT_PRODUCT: "${GRIST_DEFAULT_PRODUCT:-Free}"
      GRIST_HIDE_UI_ELEMENTS: "${GRIST_HIDE_UI_ELEMENTS:-helpCenter,billing,templates,createSite,multiSite,multiAccounts,sendToDrive,tutorials,supportGrist}"
      GRIST_LIST_PUBLIC_SITES: "${GRIST_LIST_PUBLIC_SITES:-false}"
      GRIST_MAX_UPLOAD_ATTACHMENT_MB: "${GRIST_MAX_UPLOAD_ATTACHMENT_MB:-100}"
      GRIST_MAX_UPLOAD_IMPORT_MB: "${GRIST_MAX_UPLOAD_IMPORT_MB:-500}"
      GRIST_PAGE_TITLE_SUFFIX: "${GRIST_PAGE_TITLE_SUFFIX:-_blank}"
      GRIST_WIDGET_LIST_URL: "${GRIST_WIDGET_LIST_URL:-https://github.com/gristlabs/grist-widget/releases/download/latest/manifest.json}"
      GRIST_EXPERIMENTAL_PLUGINS: "${GRIST_EXPERIMENTAL_PLUGINS:-1}"
      GRIST_TELEMETRY_LEVEL: "${GRIST_TELEMETRY_LEVEL:-off}"
      GRIST_THROTTLE_CPU: "${GRIST_THROTTLE_CPU:-true}"
      GRIST_SANDBOX_FLAVOR: "${GRIST_SANDBOX_FLAVOR:-gvisor}"
      PYTHON_VERSION: "${PYTHON_VERSION:-3}"
      PYTHON_VERSION_ON_CREATION: "${PYTHON_VERSION_ON_CREATION:-3}"
      GRIST_OIDC_IDP_ISSUER: "https://${AUTHENTIK_DOMAIN:?}/application/o/grist/.well-known/openid-configuration"
      GRIST_OIDC_IDP_CLIENT_ID: "grist"
      GRIST_OIDC_IDP_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      GRIST_OIDC_IDP_SCOPES: "openid email profile"
      GRIST_DOCS_MINIO_ENDPOINT: "minio"
      GRIST_DOCS_MINIO_PORT: "9000"
      GRIST_DOCS_MINIO_USE_SSL: "0"
      GRIST_DOCS_MINIO_BUCKET: "grist"
      GRIST_DOCS_MINIO_ACCESS_KEY: "grist"
      GRIST_DOCS_MINIO_SECRET_KEY: "${MINIO_GRIST_PASSWORD:?}"
      TYPEORM_TYPE: "sqlite"
      TYPEORM_DATABASE: "/persist/home.sqlite3"
      REDIS_URL: "redis://:${REDIS_GRIST_PASSWORD:?}@redis-grist:6379/1"
      ASSISTANT_API_KEY: "${ASSISTANT_API_KEY:-}"
      ASSISTANT_CHAT_COMPLETION_ENDPOINT: "${ASSISTANT_CHAT_COMPLETION_ENDPOINT:-}"
      ASSISTANT_MODEL: "${ASSISTANT_MODEL:-}"
      ASSISTANT_LONGER_CONTEXT_MODEL: "${ASSISTANT_LONGER_CONTEXT_MODEL:-}"
      ASSISTANT_MAX_TOKENS: "${ASSISTANT_MAX_TOKENS:-}"
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      HUGGINGFACE_API_KEY: "${HUGGINGFACE_API_KEY:-}"
      COMPLETION_MODEL: "${COMPLETION_MODEL:-}"
      COMPLETION_URL: "${COMPLETION_URL:-}"
      GRIST_PROMCLIENT_PORT: "9090"
      # Set to "0" to disable certificate validation.
      # WARNING, changing this value is unsafe and should only be used for testing purposes.
      NODE_TLS_REJECT_UNAUTHORIZED: "${GRIST_NODE_TLS_REJECT_UNAUTHORIZED:-1}"
    healthcheck:
      test: ["CMD", "bash", "-euc", ">/dev/tcp/localhost/8484"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      authentik-server:
        condition: "service_healthy"
      authentik-worker:
        condition: "service_healthy"
      minio:
        condition: "service_healthy"
      minio-init:
        condition: "service_completed_successfully"
      redis-grist:
        condition: "service_healthy"
      proxy:
        condition: "service_healthy"

  authentik-server:
    image: *authentik-server-image
    restart: "always"
    container_name: "docs-authentik-server"
    hostname: "authentik-server"
    networks:
      - "private"
    volumes: &authentik-volumes
      - { type: "bind", source: "./config/authentik/blueprints/", target: "/blueprints/custom/", read_only: true }
      - { type: "bind", source: "./config/authentik/web/dist/custom.css", target: "/web/dist/custom.css", read_only: true }
      - { type: "bind", source: "./config/authentik/web/dist/custom/", target: "/web/dist/custom/", read_only: true }
      - { type: "bind", source: "./config/authentik/web/dist/custom/blank.jpg", target: "/web/dist/assets/images/flow_background.jpg", read_only: true }
    environment: &authentik-environment
      AUTHENTIK_BOOTSTRAP_EMAIL: "${AUTHENTIK_BOOTSTRAP_EMAIL:?}"
      AUTHENTIK_BOOTSTRAP_PASSWORD: "${AUTHENTIK_BOOTSTRAP_PASSWORD:?}"
      AUTHENTIK_BOOTSTRAP_TOKEN: "${AUTHENTIK_BOOTSTRAP_TOKEN:?}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?}"
      AUTHENTIK_EMAIL__HOST: "${AUTHENTIK_EMAIL_HOST:-}"
      AUTHENTIK_EMAIL__PORT: "${AUTHENTIK_EMAIL_PORT:-465}"
      AUTHENTIK_EMAIL__USERNAME: "${AUTHENTIK_EMAIL_USERNAME:-}"
      AUTHENTIK_EMAIL__PASSWORD: "${AUTHENTIK_EMAIL_PASSWORD:-}"
      AUTHENTIK_EMAIL__USE_TLS: "${AUTHENTIK_EMAIL_USE_TLS:-false}"
      AUTHENTIK_EMAIL__USE_SSL: "${AUTHENTIK_EMAIL_USE_SSL:-true}"
      AUTHENTIK_EMAIL__FROM: "${AUTHENTIK_EMAIL_FROM:-${AUTHENTIK_EMAIL_USERNAME:-}}"
      AUTHENTIK_REDIS__HOST: "redis-authentik"
      AUTHENTIK_REDIS__PORT: "6379"
      AUTHENTIK_REDIS__PASSWORD: "${REDIS_AUTHENTIK_PASSWORD:?}"
      AUTHENTIK_REDIS__DB: "1"
      AUTHENTIK_POSTGRESQL__HOST: "postgres"
      AUTHENTIK_POSTGRESQL__PORT: "5432"
      AUTHENTIK_POSTGRESQL__NAME: "authentik"
      AUTHENTIK_POSTGRESQL__USER: "authentik"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_AUTHENTIK_PASSWORD:?}"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_AVATARS: "initials"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      GRIST_OAUTH_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      MINIO_DOMAIN: "${MINIO_DOMAIN:?}"
      GRAFANA_DOMAIN: "${GRAFANA_DOMAIN:?}"
      GRAFANA_OAUTH_CLIENT_SECRET: "${GRAFANA_OAUTH_CLIENT_SECRET:?}"
      PROMETHEUS_DOMAIN: "${PROMETHEUS_DOMAIN:?}"
      TRAEFIK_DOMAIN: "${TRAEFIK_DOMAIN:?}"
    command: ["server"]
    healthcheck:
      test: ["CMD", "ak", "healthcheck"]
      start_period: "300s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      postgres:
        condition: "service_healthy"
      redis-authentik:
        condition: "service_healthy"

  authentik-worker:
    image: *authentik-server-image
    restart: "always"
    container_name: "docs-authentik-worker"
    hostname: "authentik-worker"
    networks:
      - "private"
    volumes: *authentik-volumes
    environment: *authentik-environment
    command: ["worker"]
    healthcheck:
      test: ["CMD", "ak", "healthcheck"]
      start_period: "300s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      postgres:
        condition: "service_healthy"
      redis-authentik:
        condition: "service_healthy"

  authentik-proxy:
    image: *authentik-proxy-image
    restart: "always"
    container_name: "docs-authentik-proxy"
    hostname: "authentik-proxy"
    networks:
      - "private"
    environment:
      AUTHENTIK_HOST: "http://authentik-server:9000"
      AUTHENTIK_HOST_BROWSER: "https://${AUTHENTIK_DOMAIN:?}"
      AUTHENTIK_TOKEN: "${AUTHENTIK_BOOTSTRAP_TOKEN:?}"
      AUTHENTIK_REDIS__HOST: "redis-authentik"
      AUTHENTIK_REDIS__PORT: "6379"
      AUTHENTIK_REDIS__PASSWORD: "${REDIS_AUTHENTIK_PASSWORD:?}"
      AUTHENTIK_REDIS__DB: "1"
    healthcheck:
      test: ["CMD", "/proxy", "healthcheck"]
      start_period: "300s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      authentik-server:
        condition: "service_healthy"
      authentik-worker:
        condition: "service_healthy"

  authentik-ldap:
    image: *authentik-ldap-image
    restart: "always"
    container_name: "docs-authentik-ldap"
    hostname: "authentik-ldap"
    networks:
      - "private"
    environment:
      AUTHENTIK_HOST: "http://authentik-server:9000"
      AUTHENTIK_TOKEN: "${AUTHENTIK_BOOTSTRAP_TOKEN:?}"
      AUTHENTIK_REDIS__HOST: "redis-authentik"
      AUTHENTIK_REDIS__PORT: "6379"
      AUTHENTIK_REDIS__PASSWORD: "${REDIS_AUTHENTIK_PASSWORD:?}"
      AUTHENTIK_REDIS__DB: "1"
    healthcheck:
      test: ["CMD", "/ldap", "healthcheck"]
      start_period: "300s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      authentik-server:
        condition: "service_healthy"
      authentik-worker:
        condition: "service_healthy"

  minio:
    image: *minio-image
    restart: "always"
    container_name: "docs-minio"
    hostname: "minio"
    networks:
      - "private"
    volumes:
      - { type: "volume", source: "minio-data", target: "/data/" }
    environment:
      MINIO_ROOT_USER: "minio"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:?}"
      MINIO_VOLUMES: "/data/"
      MINIO_BROWSER: "on"
      MINIO_BROWSER_REDIRECT_URL: "https://${MINIO_DOMAIN:?}/console/"
      MINIO_PROMETHEUS_URL: "http://prometheus:9090"
      MINIO_PROMETHEUS_JOB_ID: "minio"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: ["server", "--address", ":9000", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

  minio-init:
    image: *minio-mc-image
    restart: "on-failure"
    container_name: "docs-minio-init"
    hostname: "minio-init"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/minio/init.sh", target: "/init.sh", read_only: true }
      - { type: "bind", source: "./config/minio/policies/", target: "/policies/", read_only: true }
    environment:
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:?}"
      MINIO_GRIST_PASSWORD: "${MINIO_GRIST_PASSWORD:?}"
    entrypoint: "/init.sh"
    depends_on:
      minio:
        condition: "service_healthy"

  grafana:
    image: *grafana-image
    restart: "always"
    container_name: "docs-grafana"
    hostname: "grafana"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/grafana/provisioning/", target: "/etc/grafana/provisioning/", read_only: true }
      - { type: "volume", source: "grafana-data", target: "/var/lib/grafana/" }
    environment:
      GF_SERVER_ROOT_URL: "https://${GRAFANA_DOMAIN:?}"
      GF_DATABASE_TYPE: "postgres"
      GF_DATABASE_HOST: "postgres"
      GF_DATABASE_NAME: "grafana"
      GF_DATABASE_USER: "grafana"
      GF_DATABASE_PASSWORD: "${POSTGRES_GRAFANA_PASSWORD:?}"
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:?}"
      GF_SECURITY_SECRET_KEY: "${GRAFANA_SECRET_KEY:?}"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "authentik"
      GF_AUTH_GENERIC_OAUTH_ICON: "signin"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "${GRAFANA_OAUTH_CLIENT_SECRET:?}"
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid email profile"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://${AUTHENTIK_DOMAIN:?}/application/o/authorize/"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "http://authentik-server:9000/application/o/token/"
      GF_AUTH_GENERIC_OAUTH_API_URL: "http://authentik-server:9000/application/o/userinfo/"
      GF_AUTH_SIGNOUT_REDIRECT_URL: "https://${AUTHENTIK_DOMAIN:?}/application/o/grafana/end-session/"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups[*], 'authentik Admins') && 'GrafanaAdmin'"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT: "true"
      GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:3000/api/health"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2
    depends_on:
      authentik-server:
        condition: "service_healthy"
      authentik-worker:
        condition: "service_healthy"
      postgres:
        condition: "service_healthy"
      proxy:
        condition: "service_healthy"

  prometheus:
    image: *prometheus-image
    restart: "always"
    container_name: "docs-prometheus"
    hostname: "prometheus"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/prometheus/", target: "/etc/prometheus/", read_only: true }
      - { type: "volume", source: "prometheus-data", target: "/prometheus/" }
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:9090/-/healthy"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

  postgres:
    image: *postgres-image
    restart: "always"
    container_name: "docs-postgres"
    hostname: "postgres"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/postgres/initdb.d/", target: "/docker-entrypoint-initdb.d/", read_only: true }
      - { type: "volume", source: "postgres-data", target: "/var/lib/postgresql/data/" }
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${POSTGRES_SUPERUSER_PASSWORD:?}"
      POSTGRES_AUTHENTIK_PASSWORD: "${POSTGRES_AUTHENTIK_PASSWORD:?}"
      POSTGRES_GRAFANA_PASSWORD: "${POSTGRES_GRAFANA_PASSWORD:?}"
    healthcheck:
      test: ["CMD", "pg_isready", "-qU", "postgres"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

  redis-grist:
    image: *redis-image
    restart: "always"
    container_name: "docs-redis-grist"
    hostname: "redis-grist"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/redis/redis.conf.sh", target: "/etc/redis/redis.conf.sh", read_only: true }
      - { type: "volume", source: "redis-grist-data", target: "/data/" }
    environment:
      REDISCLI_AUTH: "${REDIS_GRIST_PASSWORD:?}"
    command: ["sh", "-euc", "sh /etc/redis/redis.conf.sh | exec redis-server -"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

  redis-authentik:
    image: *redis-image
    restart: "always"
    container_name: "docs-redis-authentik"
    hostname: "redis-authentik"
    networks:
      - "private"
    volumes:
      - { type: "bind", source: "./config/redis/redis.conf.sh", target: "/etc/redis/redis.conf.sh", read_only: true }
      - { type: "volume", source: "redis-authentik-data", target: "/data/" }
    environment:
      REDISCLI_AUTH: "${REDIS_AUTHENTIK_PASSWORD:?}"
    command: ["sh", "-euc", "sh /etc/redis/redis.conf.sh | exec redis-server -"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      start_period: "120s"
      interval: "30s"
      timeout: "10s"
      retries: 2

volumes:

  traefik-acme:
    name: "docs-traefik-acme"

  grist-data:
    name: "docs-grist-data"

  minio-data:
    name: "docs-minio-data"

  grafana-data:
    name: "docs-grafana-data"

  prometheus-data:
    name: "docs-prometheus-data"

  postgres-data:
    name: "docs-postgres-data"

  redis-grist-data:
    name: "docs-redis-grist-data"

  redis-authentik-data:
    name: "docs-redis-authentik-data"

networks:

  public:
    name: "docs-public"
    internal: false

  private:
    name: "docs-private"
    internal: true
